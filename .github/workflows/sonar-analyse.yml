name: Build
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Install Vulkan SDK
        run: |
          wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
          UBUNTU_CODENAME=$(lsb_release -cs)
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-${UBUNTU_CODENAME}.list https://packages.lunarg.com/vulkan/lunarg-vulkan-${UBUNTU_CODENAME}.list
          sudo apt update
          sudo apt install -y vulkan-sdk
          spirv-as --version
          spirv-val --version

      - name: Verify SPIRV golden files
        run: |
          echo "Verifying SPIRV golden files..."
          for golden_file in ./internal/compiler/testdata/SPIRV/*.golden; do
            echo "Verifying: $golden_file"
            temp_spv=$(mktemp --suffix=.spv)
            if ! spirv-as "$golden_file" -o "$temp_spv"; then
              echo "❌ spirv-as failed for $golden_file"
              rm -f "$temp_spv"
              exit 1
            fi
            if ! spirv-val "$temp_spv"; then
              echo "❌ spirv-val failed for $golden_file"
              rm -f "$temp_spv"
              exit 1
            fi
            rm "$temp_spv"
            echo "✓ $golden_file is valid"
          done
          echo "All SPIRV golden files verified successfully!"

      - name: test
        run: |
          go version
          go test ./internal/compiler
          go test -coverprofile=coverage.out -json ./internal/compiler > report.json
          export GOCOVERDIR=cov
          mkdir cov
          go build -cover -o sabre ./cmd/sabre
          ./sabre test-scan ./internal/compiler/testdata/Scan
          ./sabre test-parse-expr ./internal/compiler/testdata/Parse/expr
          ./sabre test-parse-stmt ./internal/compiler/testdata/Parse/stmt
          ./sabre test-parse-decl ./internal/compiler/testdata/Parse/decl
          ./sabre test-check ./internal/compiler/testdata/Check
          ./sabre test-spirv ./internal/compiler/testdata/SPIRV
          go tool covdata textfmt -i=cov -o sabre-cov.out

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
